#!/usr/bin/env python3

import os, sys, subprocess, re
from environment import Environment

currentpath = os.getcwd()
composepath = os.path.abspath(os.path.dirname(sys.argv[0]) + '/../')

env = Environment(composepath + '/.env')

if len(sys.argv) <= 2:
    raise Exception('You must give a databasename and a sql file')

cmd = [
    os.path.dirname(sys.argv[0]) + '/run',
    'ps', 'mysql'
]

p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
try:
    p.wait()
except KeyboardInterrupt:
    try:
       p.terminate()
    except OSError:
       pass
    p.wait()
out, err = p.communicate()
out = out.decode('utf-8')

if not re.search('Up', out):
    raise Exception('We need a running mysql server')

cmd = [
    os.path.dirname(sys.argv[0]) + '/run',
    'ps', '-q', 'mysql'
]

p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
try:
    p.wait()
except KeyboardInterrupt:
    try:
       p.terminate()
    except OSError:
       pass
    p.wait()
out, err = p.communicate()
mysqlhash = out.decode('utf-8')
pattern = re.compile(r'\s+')
mysqlhash = re.sub(pattern, '', mysqlhash)

if not mysqlhash:
    raise Exception('No proper hash found for the running mysql instance')

db=sys.argv[1]
file=sys.argv[2]

cmd = [ 'docker', 'cp', currentpath + '/' + file, mysqlhash + ':/' + file ]

p = subprocess.Popen(cmd)
try:
    p.wait()
except KeyboardInterrupt:
    try:
       p.terminate()
    except OSError:
       pass
    p.wait()

cmd = [
    os.path.dirname(sys.argv[0]) + '/mysql',
    db, '--max_allowed_packet=1024M', '-e', 'SOURCE ' + file
]

p = subprocess.Popen(cmd)
try:
    p.wait()
except KeyboardInterrupt:
    try:
       p.terminate()
    except OSError:
       pass
    p.wait()

dockerrun = [os.path.dirname(sys.argv[0]) + '/run', 'exec']
if not sys.stdin.isatty():
    dockerrun += ['-T']

cmd = dockerrun + [
    'mysql', 'rm', file
]

p = subprocess.Popen(cmd)
try:
    p.wait()
except KeyboardInterrupt:
    try:
       p.terminate()
    except OSError:
       pass
    p.wait()

p.communicate()
sys.exit(p.returncode)
